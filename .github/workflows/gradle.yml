# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD github acution & docker
on:
  push:
    branches: [ "master" , "prod"]

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
      - name: make application.yml
        if: contains(github.ref, 'master')
        run: |
          cd ./src/main/resources 
          touch ./application.yml 
          echo "${{ secrets.YML }}" > ./application.yml

        # 환경별 yml 파일 생성(2) - dev
      - name: make application-prod.yml
        if: contains(github.ref, 'prod')
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_DEV }}" > ./application-prod.yml

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # docker build & push to production
      - name: Docker build & push to master
        if: contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-master -f ./Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-master

      # docker build & push to develop
      - name: Docker build & push to prod
        if: contains(github.ref, 'prod')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-prod -f ./Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-prod

      - name: Run Docker container
        run: |
          docker run -d -p 8080:8081 ${{ secrets.DOCKER_USERNAME }}/docker-app
          
          ## deploy to production
          #- name: Deploy to prod
          #uses: appleboy/ssh-action@master
          #id: deploy-prod
          #if: contains(github.ref, 'master')
          #with:
          #host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          #username: ubuntu
          #key: ${{ secrets.PRIVATE_KEY }}
          #envs: GITHUB_SHA
          #script: |
          #sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
          #sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
          #sudo docker image prune -f
          
          ## deploy to develop
          #- name: Deploy to dev
          #uses: appleboy/ssh-action@master
          #id: deploy-dev
          #if: contains(github.ref, 'dev')
          #with:
          #host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          #username: ${{ secrets.USERNAME }} # ubuntu
          #password: ${{ secrets.PASSWORD }}
          #port: 22
          #key: ${{ secrets.PRIVATE_KEY }}
          #script: |
          #sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
          #sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
          #sudo docker image prune -f


    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
